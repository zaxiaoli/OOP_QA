Valgrind 监控你的内存

Valgrind
Valgrind是一款用于内存调试、内存泄漏检测以及性能分析的软件开发工具。

Valgrind下载
1.获取源码wget http://www.valgrind.org/downloads/valgrind-3.14.0.tar.bz2
2.解压缩tar -jxvf valg
3.进入目录,进行安装（其中/home/user1/valgrind是你想安装的目录）cd valgrind-3.14.0 ./configure --prefix=/home/user1/valgrind make make install
4.配置环境变量，首先打开
~/.bashrcvim ~/.bashrcrind-3.14.0.tar.bz2
将下面一段话考入该文件
export PATH=$PATH:~/valgrind/bin/
使改变生效source ~/.bashrc

Valgrind功能
Valgrind工具包包含多个工具，如Memcheck,Cachegrind,Helgrind, Callgrind，Massif。
Memcheck。这是valgrind应用最广泛的工具，一个重量级的内存检查器，能够发现开发中绝大多数内存错误使用情况，我们主要使用即此工具，默认选项。此工具检查下面的程序错误：·       
使用未初始化的内存 (Use of uninitialised memory)·       
使用已经释放了的内存 (Reading/writing memory after it has been free’d)·      
使用超过 malloc分配的内存空间(Reading/writing off the endof malloc’d blocks)·     
对堆栈的非法访问 (Reading/writing inappropriate areas on the stack)·       
申请的空间是否有释放 (Memory leaks – where pointers to malloc’d blocks are lost forever)·       
malloc/free/new/delete申请和释放内存的匹配(Mismatched use of malloc/new/new [] vs free/delete/delete [])·       
src和dst的重叠(Overlapping src and dst pointers inmemcpy() and related functions)Linux 

程序内存空间布局
一个典型的Linux C程序内存空间由如下几部分组成：
代码段（.text）。CPU要执行的指令。可共享，相同的代码在内存中只会有一个拷贝，只读，防止程序由于错误而修改自身的指令。
初始化数据段（.data）。明确赋初始值的变量，例如位于所有函数之外的全局变量：int val=100。
未初始化数据段（.bss）。位于这一段中的数据，内核在执行该程序前，将其初始化为0或者null。例如出现在任何函数之外的全局变量：int sum;
堆（Heap）。
栈（Stack）。
Memcheck 能够检测出内存问题，关键在于其建立了两个全局表。
Valid-Value 表：对于进程的整个地址空间中的每一个字节(byte)，都有与之对应的 8 个bits；对于 CPU 的每个寄存器，也有一个与之对应的bit 向量。这些 bits 负责记录该字节或者寄存器值是否具有有效的、已初始化的值。
Valid-Address 表对于进程整个地址空间中的每一个字节(byte)，还有与之对应的 1 个bit，负责记录该地址是否能够被读写。

Valgrind使用用法: 
valgrind [options]prog-and-args [options]:常用选项，适用于所有Valgrind工具
1.  -tool=<name>最常用的选项。运行valgrind中名为toolname的工具。默认memcheck。
2.  h –help显示帮助信息。
3.  -version显示valgrind内核的版本，每个工具都有各自的版本。
4.  q –quiet安静地运行，只打印错误信息。
5.  v –verbose更详细的信息,增加错误数统计。

例子
1 int main()  
2 { 
3    int * pArray =malloc(sizeof(int) * 5);  
4 
5    pArray[5] = 1;  
6  
7  
8    int * pInt ;  
9
10    int x = *pInt; 
11 
12    * pInt = 2;                                             


 return 0; 
15 }
编译 gcc -g -otest main.c1314    


==30407== Use ofuninitialised value of size 4  //四字节的未初始化内存被使用
==30407==    at 0x8048466: main (main.c:10) //代码位置，第10行，即int x = *pInt;
==30407== Use ofuninitialised value of size 4 //四字节的未初始化内存被使用
==30407==    at 0x8048470: main (main.c:12) //代码位置，第12行，即* pInt = 2;
==30407== Processterminating with default action of signal 11 (SIGSEGV): dumping core   //非法指针导致呈现崩溃
==30407==  Bad permissions for mapped region at address0x804848B==30407==    at 0x8048470: main (main.c:12) //具体位置，12行。
==30407== HEAPSUMMARY:==30407==     in use at exit: 20 bytes in 1 blocks      // 20个bytes，未free，即数组pArray。
==30407==   total  heap usage: 1 allocs, 0 frees, 20bytes allocated#include <iostream> 

int main() {int* a = NULL;a = new int[10];return 0;} 

g++ -g test_valgrind.cpp valgrind --leak-check=yes ./a.out
